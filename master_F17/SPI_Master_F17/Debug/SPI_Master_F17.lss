
SPI_Master_F17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000006b0  00000724  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e26  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000be2  00000000  00000000  0000275e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c13  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00003f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000834  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010c4  00000000  00000000  000049c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00005a8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4a 02 	call	0x494	; 0x494 <main>
  7a:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WriteChannel>:
		case DIO_PortC:
		ToggleBit(PORTC_Reg,ChannelPos);
		break;
		
		case DIO_PortD:
		ToggleBit(PORTD_Reg,ChannelPos);
  82:	98 2f       	mov	r25, r24
  84:	97 70       	andi	r25, 0x07	; 7
  86:	86 95       	lsr	r24
  88:	86 95       	lsr	r24
  8a:	86 95       	lsr	r24
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_WriteChannel+0x1c>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_WriteChannel+0x90>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_WriteChannel+0xca>
  9c:	08 95       	ret
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_WriteChannel+0x3a>
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	9a 95       	dec	r25
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	9a 95       	dec	r25
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WriteChannel+0x74>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	9a 95       	dec	r25
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_WriteChannel+0xae>
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	9a 95       	dec	r25
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	9a 95       	dec	r25
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_WriteChannel+0xe8>
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	9a 95       	dec	r25
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	9a 95       	dec	r25
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_WritePort>:
	
}


void DIO_WritePort(DIO_PortTypes PortId, Uint8 data){
	switch(PortId){
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <DIO_WritePort+0x14>
 18a:	28 f0       	brcs	.+10     	; 0x196 <DIO_WritePort+0x10>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	39 f0       	breq	.+14     	; 0x19e <DIO_WritePort+0x18>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	39 f0       	breq	.+14     	; 0x1a2 <DIO_WritePort+0x1c>
 194:	08 95       	ret
		case DIO_PortA:
			PORTA_Reg=data;
 196:	6b bb       	out	0x1b, r22	; 27
			break;
 198:	08 95       	ret
		
		case DIO_PortB:
			PORTB_Reg=data;
 19a:	68 bb       	out	0x18, r22	; 24
			break;
 19c:	08 95       	ret
		
		case DIO_PortC:
			PORTC_Reg=data;
 19e:	65 bb       	out	0x15, r22	; 21
			break;
 1a0:	08 95       	ret
		
		case DIO_PortD:
			PORTD_Reg=data;
 1a2:	62 bb       	out	0x12, r22	; 18
 1a4:	08 95       	ret

000001a6 <DIO_ReadPort>:
	}
}

Uint8 DIO_ReadPort(DIO_PortTypes portId){
	Uint8 data = 0xFF ;
	switch(portId){
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	41 f0       	breq	.+16     	; 0x1ba <DIO_ReadPort+0x14>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <DIO_ReadPort+0x10>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	39 f0       	breq	.+14     	; 0x1be <DIO_ReadPort+0x18>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	39 f0       	breq	.+14     	; 0x1c2 <DIO_ReadPort+0x1c>
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <DIO_ReadPort+0x20>
		case DIO_PortA:
		data = PORTA_Reg;
 1b6:	8b b3       	in	r24, 0x1b	; 27
		break;
 1b8:	08 95       	ret
		
		case DIO_PortB:
		data = PORTB_Reg;
 1ba:	88 b3       	in	r24, 0x18	; 24
		break;
 1bc:	08 95       	ret
		
		case DIO_PortC:
		data = PORTC_Reg;
 1be:	85 b3       	in	r24, 0x15	; 21
		break;
 1c0:	08 95       	ret
		
		case DIO_PortD:
		data = PORTD_Reg;
 1c2:	82 b3       	in	r24, 0x12	; 18
		break;
 1c4:	08 95       	ret
			break;
	}
}

Uint8 DIO_ReadPort(DIO_PortTypes portId){
	Uint8 data = 0xFF ;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
		data = PORTD_Reg;
		break;
	}
	
	return data;
 1c8:	08 95       	ret

000001ca <DIO_Init>:
	{Input, STD_Low},
	{Input, STD_Low},
	{Input, STD_Low}
};

void DIO_Init(){
 1ca:	e0 e6       	ldi	r30, 0x60	; 96
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
	Uint8 count = 0;
	DIO_PortTypes portx;
	DIO_ChannelTypes ChannelPos;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++){
 1ce:	80 e0       	ldi	r24, 0x00	; 0
			if(PinCFG[count].ChannelDir == Output){
				SetBit(DDRB_Reg,ChannelPos);
			}
			else
			{
				ClearBit(DDRB_Reg,ChannelPos);
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	50 e0       	ldi	r21, 0x00	; 0
	Uint8 count = 0;
	DIO_PortTypes portx;
	DIO_ChannelTypes ChannelPos;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++){
		portx = count/8;
		ChannelPos = count%8;
 1d4:	28 2f       	mov	r18, r24
 1d6:	27 70       	andi	r18, 0x07	; 7
		switch(portx){
 1d8:	98 2f       	mov	r25, r24
 1da:	96 95       	lsr	r25
 1dc:	96 95       	lsr	r25
 1de:	96 95       	lsr	r25
 1e0:	91 30       	cpi	r25, 0x01	; 1
 1e2:	09 f1       	breq	.+66     	; 0x226 <DIO_Init+0x5c>
 1e4:	30 f0       	brcs	.+12     	; 0x1f2 <DIO_Init+0x28>
 1e6:	92 30       	cpi	r25, 0x02	; 2
 1e8:	c1 f1       	breq	.+112    	; 0x25a <DIO_Init+0x90>
 1ea:	93 30       	cpi	r25, 0x03	; 3
 1ec:	09 f4       	brne	.+2      	; 0x1f0 <DIO_Init+0x26>
 1ee:	4f c0       	rjmp	.+158    	; 0x28e <DIO_Init+0xc4>
 1f0:	67 c0       	rjmp	.+206    	; 0x2c0 <DIO_Init+0xf6>
			case DIO_PortA :
			if(PinCFG[count].ChannelDir == Output){
 1f2:	90 81       	ld	r25, Z
 1f4:	91 30       	cpi	r25, 0x01	; 1
 1f6:	59 f4       	brne	.+22     	; 0x20e <DIO_Init+0x44>
				SetBit(DDRA_Reg,ChannelPos);
 1f8:	9a b3       	in	r25, 0x1a	; 26
 1fa:	ba 01       	movw	r22, r20
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_Init+0x38>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	2a 95       	dec	r18
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_Init+0x34>
 206:	9b 01       	movw	r18, r22
 208:	29 2b       	or	r18, r25
 20a:	2a bb       	out	0x1a, r18	; 26
 20c:	59 c0       	rjmp	.+178    	; 0x2c0 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRA_Reg,ChannelPos);
 20e:	3a b3       	in	r19, 0x1a	; 26
 210:	ba 01       	movw	r22, r20
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_Init+0x4e>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	2a 95       	dec	r18
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_Init+0x4a>
 21c:	96 2f       	mov	r25, r22
 21e:	90 95       	com	r25
 220:	93 23       	and	r25, r19
 222:	9a bb       	out	0x1a, r25	; 26
 224:	4d c0       	rjmp	.+154    	; 0x2c0 <DIO_Init+0xf6>
			}
			break;
			
			/*port B*/
			case DIO_PortB :
			if(PinCFG[count].ChannelDir == Output){
 226:	90 81       	ld	r25, Z
 228:	91 30       	cpi	r25, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_Init+0x78>
				SetBit(DDRB_Reg,ChannelPos);
 22c:	97 b3       	in	r25, 0x17	; 23
 22e:	ba 01       	movw	r22, r20
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_Init+0x6c>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	2a 95       	dec	r18
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_Init+0x68>
 23a:	9b 01       	movw	r18, r22
 23c:	29 2b       	or	r18, r25
 23e:	27 bb       	out	0x17, r18	; 23
 240:	3f c0       	rjmp	.+126    	; 0x2c0 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRB_Reg,ChannelPos);
 242:	37 b3       	in	r19, 0x17	; 23
 244:	ba 01       	movw	r22, r20
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Init+0x82>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	2a 95       	dec	r18
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Init+0x7e>
 250:	96 2f       	mov	r25, r22
 252:	90 95       	com	r25
 254:	93 23       	and	r25, r19
 256:	97 bb       	out	0x17, r25	; 23
 258:	33 c0       	rjmp	.+102    	; 0x2c0 <DIO_Init+0xf6>
			}
			break;
			
			/*portC*/
			case DIO_PortC :
			if(PinCFG[count].ChannelDir == Output){
 25a:	90 81       	ld	r25, Z
 25c:	91 30       	cpi	r25, 0x01	; 1
 25e:	59 f4       	brne	.+22     	; 0x276 <DIO_Init+0xac>
				SetBit(DDRC_Reg,ChannelPos);
 260:	94 b3       	in	r25, 0x14	; 20
 262:	ba 01       	movw	r22, r20
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_Init+0xa0>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	2a 95       	dec	r18
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_Init+0x9c>
 26e:	9b 01       	movw	r18, r22
 270:	29 2b       	or	r18, r25
 272:	24 bb       	out	0x14, r18	; 20
 274:	25 c0       	rjmp	.+74     	; 0x2c0 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRC_Reg,ChannelPos);
 276:	34 b3       	in	r19, 0x14	; 20
 278:	ba 01       	movw	r22, r20
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_Init+0xb6>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	2a 95       	dec	r18
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_Init+0xb2>
 284:	96 2f       	mov	r25, r22
 286:	90 95       	com	r25
 288:	93 23       	and	r25, r19
 28a:	94 bb       	out	0x14, r25	; 20
 28c:	19 c0       	rjmp	.+50     	; 0x2c0 <DIO_Init+0xf6>
			}
			break;
			
			/*portD*/
			case DIO_PortD :
			if(PinCFG[count].ChannelDir == Output){
 28e:	90 81       	ld	r25, Z
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	59 f4       	brne	.+22     	; 0x2aa <DIO_Init+0xe0>
				SetBit(DDRD_Reg,ChannelPos);
 294:	91 b3       	in	r25, 0x11	; 17
 296:	ba 01       	movw	r22, r20
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_Init+0xd4>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	2a 95       	dec	r18
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_Init+0xd0>
 2a2:	9b 01       	movw	r18, r22
 2a4:	29 2b       	or	r18, r25
 2a6:	21 bb       	out	0x11, r18	; 17
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <DIO_Init+0xf6>
			}
			else
			{
				ClearBit(DDRD_Reg,ChannelPos);
 2aa:	31 b3       	in	r19, 0x11	; 17
 2ac:	ba 01       	movw	r22, r20
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_Init+0xea>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_Init+0xe6>
 2b8:	96 2f       	mov	r25, r22
 2ba:	90 95       	com	r25
 2bc:	93 23       	and	r25, r19
 2be:	91 bb       	out	0x11, r25	; 17

void DIO_Init(){
	Uint8 count = 0;
	DIO_PortTypes portx;
	DIO_ChannelTypes ChannelPos;
	for (count=DIO_ChannelA0;count<PINCOUNT;count++){
 2c0:	8f 5f       	subi	r24, 0xFF	; 255
 2c2:	32 96       	adiw	r30, 0x02	; 2
 2c4:	80 32       	cpi	r24, 0x20	; 32
 2c6:	09 f0       	breq	.+2      	; 0x2ca <DIO_Init+0x100>
 2c8:	85 cf       	rjmp	.-246    	; 0x1d4 <DIO_Init+0xa>
		}
		
	}
	
	
}
 2ca:	08 95       	ret

000002cc <LCD_Cmd>:
		case 2:
		LCD_Cmd(0xC0 | (pos & 0x0F));
		LCD_Char(data);
		break;
	}
}
 2cc:	cf 93       	push	r28
 2ce:	c8 2f       	mov	r28, r24
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_ReadPort>
 2d6:	8f 70       	andi	r24, 0x0F	; 15
 2d8:	9c 2f       	mov	r25, r28
 2da:	90 7f       	andi	r25, 0xF0	; 240
 2dc:	68 2f       	mov	r22, r24
 2de:	69 2b       	or	r22, r25
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_WritePort>
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	89 e0       	ldi	r24, 0x09	; 9
 2ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	8b e0       	ldi	r24, 0x0B	; 11
 2f2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 2f6:	8f e8       	ldi	r24, 0x8F	; 143
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <LCD_Cmd+0x2e>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <LCD_Cmd+0x34>
 300:	00 00       	nop
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	8b e0       	ldi	r24, 0x0B	; 11
 306:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 30a:	8f e1       	ldi	r24, 0x1F	; 31
 30c:	9e e4       	ldi	r25, 0x4E	; 78
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <LCD_Cmd+0x42>
 312:	00 c0       	rjmp	.+0      	; 0x314 <LCD_Cmd+0x48>
 314:	00 00       	nop
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_ReadPort>
 31c:	8f 70       	andi	r24, 0x0F	; 15
 31e:	90 e1       	ldi	r25, 0x10	; 16
 320:	c9 9f       	mul	r28, r25
 322:	90 01       	movw	r18, r0
 324:	11 24       	eor	r1, r1
 326:	68 2f       	mov	r22, r24
 328:	62 2b       	or	r22, r18
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_WritePort>
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	89 e0       	ldi	r24, 0x09	; 9
 334:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	8b e0       	ldi	r24, 0x0B	; 11
 33c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 340:	8f e8       	ldi	r24, 0x8F	; 143
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_Cmd+0x78>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_Cmd+0x7e>
 34a:	00 00       	nop
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	8b e0       	ldi	r24, 0x0B	; 11
 350:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 354:	8f e3       	ldi	r24, 0x3F	; 63
 356:	9f e1       	ldi	r25, 0x1F	; 31
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <LCD_Cmd+0x8c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <LCD_Cmd+0x92>
 35e:	00 00       	nop
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <LCD_Init>:
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	8a e0       	ldi	r24, 0x0A	; 10
 368:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	8b e0       	ldi	r24, 0x0B	; 11
 370:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	89 ef       	ldi	r24, 0xF9	; 249
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <LCD_Init+0x16>
 382:	00 c0       	rjmp	.+0      	; 0x384 <LCD_Init+0x20>
 384:	00 00       	nop
 386:	83 e3       	ldi	r24, 0x33	; 51
 388:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 38c:	8f e8       	ldi	r24, 0x8F	; 143
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_Init+0x2c>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_Init+0x32>
 396:	00 00       	nop
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 3a4:	86 e0       	ldi	r24, 0x06	; 6
 3a6:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 3b6:	8f e3       	ldi	r24, 0x3F	; 63
 3b8:	9f e1       	ldi	r25, 0x1F	; 31
 3ba:	01 97       	sbiw	r24, 0x01	; 1
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_Init+0x56>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <LCD_Init+0x5c>
 3c0:	00 00       	nop
 3c2:	08 95       	ret

000003c4 <LCD_Char>:
 3c4:	cf 93       	push	r28
 3c6:	c8 2f       	mov	r28, r24
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_ReadPort>
 3ce:	8f 70       	andi	r24, 0x0F	; 15
 3d0:	9c 2f       	mov	r25, r28
 3d2:	90 7f       	andi	r25, 0xF0	; 240
 3d4:	68 2f       	mov	r22, r24
 3d6:	69 2b       	or	r22, r25
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_WritePort>
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	89 e0       	ldi	r24, 0x09	; 9
 3e2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	8b e0       	ldi	r24, 0x0B	; 11
 3ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	81 ee       	ldi	r24, 0xE1	; 225
 3f2:	94 e0       	ldi	r25, 0x04	; 4
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <LCD_Char+0x30>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <LCD_Char+0x3a>
 3fe:	00 00       	nop
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	8b e0       	ldi	r24, 0x0B	; 11
 404:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 408:	8f e1       	ldi	r24, 0x1F	; 31
 40a:	9e e4       	ldi	r25, 0x4E	; 78
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <DIO_ReadPort>
 41a:	6c 2f       	mov	r22, r28
 41c:	62 95       	swap	r22
 41e:	60 7f       	andi	r22, 0xF0	; 240
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_WritePort>
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	89 e0       	ldi	r24, 0x09	; 9
 42a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	8b e0       	ldi	r24, 0x0B	; 11
 432:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 436:	9f ef       	ldi	r25, 0xFF	; 255
 438:	21 ee       	ldi	r18, 0xE1	; 225
 43a:	84 e0       	ldi	r24, 0x04	; 4
 43c:	91 50       	subi	r25, 0x01	; 1
 43e:	20 40       	sbci	r18, 0x00	; 0
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 446:	00 00       	nop
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	8b e0       	ldi	r24, 0x0B	; 11
 44c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 450:	8f e3       	ldi	r24, 0x3F	; 63
 452:	9f e1       	ldi	r25, 0x1F	; 31
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <LCD_String>:
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	fc 01       	movw	r30, r24
 468:	80 81       	ld	r24, Z
 46a:	88 23       	and	r24, r24
 46c:	59 f0       	breq	.+22     	; 0x484 <LCD_String+0x24>
 46e:	8f 01       	movw	r16, r30
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_Char>
 476:	cf 5f       	subi	r28, 0xFF	; 255
 478:	f8 01       	movw	r30, r16
 47a:	ec 0f       	add	r30, r28
 47c:	f1 1d       	adc	r31, r1
 47e:	80 81       	ld	r24, Z
 480:	81 11       	cpse	r24, r1
 482:	f7 cf       	rjmp	.-18     	; 0x472 <LCD_String+0x12>
 484:	cf 91       	pop	r28
 486:	1f 91       	pop	r17
 488:	0f 91       	pop	r16
 48a:	08 95       	ret

0000048c <LCD_Clear>:

void LCD_Clear(){
	LCD_Cmd(0x01);
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
 492:	08 95       	ret

00000494 <main>:
#define F_CPU 16000000UL
#include "util/delay.h"


int main(void)
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
 49c:	c2 55       	subi	r28, 0x52	; 82
 49e:	d1 09       	sbc	r29, r1
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
	DIO_Init();
 4aa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_Init>
	LCD_Init();
 4ae:	0e 94 b2 01 	call	0x364	; 0x364 <LCD_Init>
	Uart_Init();
 4b2:	0e 94 15 03 	call	0x62a	; 0x62a <Uart_Init>
	SPI_InitType MyInit = {Master, MSB};
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	89 83       	std	Y+1, r24	; 0x01
 4ba:	1a 82       	std	Y+2, r1	; 0x02
	SPI_Init(&MyInit);
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <SPI_Init>
	SPI_SlaveEN(SPI_PortReg, SS);
 4c4:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	89 e6       	ldi	r24, 0x69	; 105
 4ca:	98 e1       	ldi	r25, 0x18	; 24
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0x38>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0x42>
 4d6:	00 00       	nop
	Uint8 array[30];
	Uint8 ary[30];
	while (1)
	{
		/*you have to send the number of op twice(to make over write) as the value in SPDR is still stored in it from previous operation*/
		op = Uart_RxChar();//receiving the value from UART
 4d8:	0e 94 1d 03 	call	0x63a	; 0x63a <Uart_RxChar>

		switch(op){
 4dc:	82 33       	cpi	r24, 0x32	; 50
 4de:	81 f1       	breq	.+96     	; 0x540 <main+0xac>
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <main+0x54>
 4e2:	81 33       	cpi	r24, 0x31	; 49
 4e4:	41 f0       	breq	.+16     	; 0x4f6 <main+0x62>
 4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <main+0x44>
 4e8:	83 33       	cpi	r24, 0x33	; 51
 4ea:	09 f4       	brne	.+2      	; 0x4ee <main+0x5a>
 4ec:	53 c0       	rjmp	.+166    	; 0x594 <main+0x100>
 4ee:	84 33       	cpi	r24, 0x34	; 52
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <main+0x60>
 4f2:	73 c0       	rjmp	.+230    	; 0x5da <main+0x146>
 4f4:	f1 cf       	rjmp	.-30     	; 0x4d8 <main+0x44>
			/*temperature sensor*/
			case '1':
				LCD_Clear();
 4f6:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Clear>
				SPI_Tx(0x01);//sending a dummy value to slave to check on it
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_Tx>
 500:	2f ef       	ldi	r18, 0xFF	; 255
 502:	81 ee       	ldi	r24, 0xE1	; 225
 504:	94 e0       	ldi	r25, 0x04	; 4
 506:	21 50       	subi	r18, 0x01	; 1
 508:	80 40       	sbci	r24, 0x00	; 0
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x72>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x7c>
 510:	00 00       	nop
				_delay_ms(100);
				LCD_Clear();
 512:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Clear>
				LCD_String("temp");
 516:	80 ea       	ldi	r24, 0xA0	; 160
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
				int  x = SPI_Rx();//receive temperature from slave
 51e:	0e 94 13 03 	call	0x626	; 0x626 <SPI_Rx>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 522:	4a e0       	ldi	r20, 0x0A	; 10
 524:	be 01       	movw	r22, r28
 526:	6d 5f       	subi	r22, 0xFD	; 253
 528:	7f 4f       	sbci	r23, 0xFF	; 255
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 21 03 	call	0x642	; 0x642 <__itoa_ncheck>
				itoa(x,arr,10);
				LCD_Cmd(0xC0);
 530:	80 ec       	ldi	r24, 0xC0	; 192
 532:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
				LCD_String(arr);
 536:	ce 01       	movw	r24, r28
 538:	03 96       	adiw	r24, 0x03	; 3
 53a:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
			break;
 53e:	cc cf       	rjmp	.-104    	; 0x4d8 <main+0x44>
			/*Motor on */
			/*the motor speeds up gradually*/
			case '2':
				LCD_Clear();
 540:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Clear>
				SPI_Tx(0x02);
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_Tx>
 54a:	2f ef       	ldi	r18, 0xFF	; 255
 54c:	81 ee       	ldi	r24, 0xE1	; 225
 54e:	94 e0       	ldi	r25, 0x04	; 4
 550:	21 50       	subi	r18, 0x01	; 1
 552:	80 40       	sbci	r24, 0x00	; 0
 554:	90 40       	sbci	r25, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <main+0xbc>
 558:	00 c0       	rjmp	.+0      	; 0x55a <main+0xc6>
 55a:	00 00       	nop
				_delay_ms(100);
				LCD_String("Dc Motor on");
 55c:	85 ea       	ldi	r24, 0xA5	; 165
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
				Uint8 data = SPI_Rx();//received value from slave
 564:	0e 94 13 03 	call	0x626	; 0x626 <SPI_Rx>
 568:	4a e0       	ldi	r20, 0x0A	; 10
 56a:	be 01       	movw	r22, r28
 56c:	69 5e       	subi	r22, 0xE9	; 233
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 21 03 	call	0x642	; 0x642 <__itoa_ncheck>
				itoa(data,array,10);
				LCD_Cmd(0xC0);
 576:	80 ec       	ldi	r24, 0xC0	; 192
 578:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
				LCD_String("speed:");
 57c:	81 eb       	ldi	r24, 0xB1	; 177
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
				LCD_Cmd(0xC7);
 584:	87 ec       	ldi	r24, 0xC7	; 199
 586:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
				LCD_String(array);
 58a:	ce 01       	movw	r24, r28
 58c:	47 96       	adiw	r24, 0x17	; 23
 58e:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
			break;
 592:	a2 cf       	rjmp	.-188    	; 0x4d8 <main+0x44>
			
			/*motor off*/
			/*the motor speed decreases gradually and doesn't stop immediately after you press the key*/
			case '3' :
			
				LCD_Clear();
 594:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Clear>
				SPI_Tx(0x03);
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_Tx>
 59e:	2f ef       	ldi	r18, 0xFF	; 255
 5a0:	81 ee       	ldi	r24, 0xE1	; 225
 5a2:	94 e0       	ldi	r25, 0x04	; 4
 5a4:	21 50       	subi	r18, 0x01	; 1
 5a6:	80 40       	sbci	r24, 0x00	; 0
 5a8:	90 40       	sbci	r25, 0x00	; 0
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <main+0x110>
 5ac:	00 c0       	rjmp	.+0      	; 0x5ae <main+0x11a>
 5ae:	00 00       	nop
				_delay_ms(100);
				LCD_String("Dc Motor off");
 5b0:	88 eb       	ldi	r24, 0xB8	; 184
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
				Uint8 rec = SPI_Rx();
 5b8:	0e 94 13 03 	call	0x626	; 0x626 <SPI_Rx>
 5bc:	4a e0       	ldi	r20, 0x0A	; 10
 5be:	be 01       	movw	r22, r28
 5c0:	6b 5c       	subi	r22, 0xCB	; 203
 5c2:	7f 4f       	sbci	r23, 0xFF	; 255
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 21 03 	call	0x642	; 0x642 <__itoa_ncheck>
				itoa(rec,ary,10);
				LCD_Cmd(0xC0);
 5ca:	80 ec       	ldi	r24, 0xC0	; 192
 5cc:	0e 94 66 01 	call	0x2cc	; 0x2cc <LCD_Cmd>
				LCD_String(ary);
 5d0:	ce 01       	movw	r24, r28
 5d2:	c5 96       	adiw	r24, 0x35	; 53
 5d4:	0e 94 30 02 	call	0x460	; 0x460 <LCD_String>
			
			break;
 5d8:	7f cf       	rjmp	.-258    	; 0x4d8 <main+0x44>
			
			/*clearing lcd on both master and slave*/
			case '4':
			LCD_Clear();
 5da:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_Clear>
			SPI_Tx(0x04);
 5de:	84 e0       	ldi	r24, 0x04	; 4
 5e0:	0e 94 0e 03 	call	0x61c	; 0x61c <SPI_Tx>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	81 ee       	ldi	r24, 0xE1	; 225
 5e8:	94 e0       	ldi	r25, 0x04	; 4
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x156>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0x160>
 5f4:	00 00       	nop
 5f6:	70 cf       	rjmp	.-288    	; 0x4d8 <main+0x44>

000005f8 <SPI_Init>:
*/
#include "SPI.h"


void SPI_Init(SPI_InitType * MyInit){
	switch (MyInit->state)
 5f8:	fc 01       	movw	r30, r24
 5fa:	80 81       	ld	r24, Z
 5fc:	88 23       	and	r24, r24
 5fe:	51 f0       	breq	.+20     	; 0x614 <SPI_Init+0x1c>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	59 f4       	brne	.+22     	; 0x61a <SPI_Init+0x22>
	{
		case Master:
		SPI_SlaveDIS(SPI_PortReg, SS);
 604:	c4 9a       	sbi	0x18, 4	; 24
		SPI_DataDirReg |= (1<<MOSI)|(1<<SS)|(1<<SCK);
 606:	87 b3       	in	r24, 0x17	; 23
 608:	80 6b       	ori	r24, 0xB0	; 176
 60a:	87 bb       	out	0x17, r24	; 23
		SPI_DataDirReg &=~ (1<<MISO);
 60c:	be 98       	cbi	0x17, 6	; 23
		//SPCR |=(1<<SPE)|(1<<MSTR);
		//SPI->MySPCR.AllRegister = 0x50;
		SPI->MySPCR.RegisterBits.MyMSTR = 1;
 60e:	6c 9a       	sbi	0x0d, 4	; 13
		SPI->MySPCR.RegisterBits.MySPE = 1;
 610:	6e 9a       	sbi	0x0d, 6	; 13
		break;
 612:	08 95       	ret
		
		case Slave:
		SPI_DataDirReg &=~ (1<<MOSI)|(1<<SS)|(1<<SCK);
 614:	bd 98       	cbi	0x17, 5	; 23
		SPI_DataDirReg |= (1<<MISO);
 616:	be 9a       	sbi	0x17, 6	; 23
		SPCR |= (1<<SPE);
 618:	6e 9a       	sbi	0x0d, 6	; 13
 61a:	08 95       	ret

0000061c <SPI_Tx>:
	}
	
}

Uint8 SPI_Tx(Uint8 data){
	SPI->MySPDR = data;
 61c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPI->MySPSR  & (1<<SPIF)));
 61e:	77 9b       	sbis	0x0e, 7	; 14
 620:	fe cf       	rjmp	.-4      	; 0x61e <SPI_Tx+0x2>
	return SPI->MySPDR;
 622:	8f b1       	in	r24, 0x0f	; 15
}
 624:	08 95       	ret

00000626 <SPI_Rx>:


unsigned char SPI_Rx(void){
	return SPI->MySPDR;
 626:	8f b1       	in	r24, 0x0f	; 15
	
}
 628:	08 95       	ret

0000062a <Uart_Init>:
	while (string[i] != '\0')
	{
		Uart_TxChar(string[i]);
		i++;
	}
}
 62a:	88 e1       	ldi	r24, 0x18	; 24
 62c:	8a b9       	out	0x0a, r24	; 10
 62e:	86 e8       	ldi	r24, 0x86	; 134
 630:	80 bd       	out	0x20, r24	; 32
 632:	87 e6       	ldi	r24, 0x67	; 103
 634:	89 b9       	out	0x09, r24	; 9
 636:	10 bc       	out	0x20, r1	; 32
 638:	08 95       	ret

0000063a <Uart_RxChar>:

unsigned char Uart_RxChar(void){
	//receive flag
	while(!(UCSRA & (1<<RXC)));
 63a:	5f 9b       	sbis	0x0b, 7	; 11
 63c:	fe cf       	rjmp	.-4      	; 0x63a <Uart_RxChar>
	return UDR;
 63e:	8c b1       	in	r24, 0x0c	; 12
	
}
 640:	08 95       	ret

00000642 <__itoa_ncheck>:
 642:	bb 27       	eor	r27, r27
 644:	4a 30       	cpi	r20, 0x0A	; 10
 646:	31 f4       	brne	.+12     	; 0x654 <__itoa_ncheck+0x12>
 648:	99 23       	and	r25, r25
 64a:	22 f4       	brpl	.+8      	; 0x654 <__itoa_ncheck+0x12>
 64c:	bd e2       	ldi	r27, 0x2D	; 45
 64e:	90 95       	com	r25
 650:	81 95       	neg	r24
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__utoa_common>

00000658 <__utoa_ncheck>:
 658:	bb 27       	eor	r27, r27

0000065a <__utoa_common>:
 65a:	fb 01       	movw	r30, r22
 65c:	55 27       	eor	r21, r21
 65e:	aa 27       	eor	r26, r26
 660:	88 0f       	add	r24, r24
 662:	99 1f       	adc	r25, r25
 664:	aa 1f       	adc	r26, r26
 666:	a4 17       	cp	r26, r20
 668:	10 f0       	brcs	.+4      	; 0x66e <__utoa_common+0x14>
 66a:	a4 1b       	sub	r26, r20
 66c:	83 95       	inc	r24
 66e:	50 51       	subi	r21, 0x10	; 16
 670:	b9 f7       	brne	.-18     	; 0x660 <__utoa_common+0x6>
 672:	a0 5d       	subi	r26, 0xD0	; 208
 674:	aa 33       	cpi	r26, 0x3A	; 58
 676:	08 f0       	brcs	.+2      	; 0x67a <__utoa_common+0x20>
 678:	a9 5d       	subi	r26, 0xD9	; 217
 67a:	a1 93       	st	Z+, r26
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	79 f7       	brne	.-34     	; 0x65e <__utoa_common+0x4>
 680:	b1 11       	cpse	r27, r1
 682:	b1 93       	st	Z+, r27
 684:	11 92       	st	Z+, r1
 686:	cb 01       	movw	r24, r22
 688:	0c 94 46 03 	jmp	0x68c	; 0x68c <strrev>

0000068c <strrev>:
 68c:	dc 01       	movw	r26, r24
 68e:	fc 01       	movw	r30, r24
 690:	67 2f       	mov	r22, r23
 692:	71 91       	ld	r23, Z+
 694:	77 23       	and	r23, r23
 696:	e1 f7       	brne	.-8      	; 0x690 <strrev+0x4>
 698:	32 97       	sbiw	r30, 0x02	; 2
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <strrev+0x18>
 69c:	7c 91       	ld	r23, X
 69e:	6d 93       	st	X+, r22
 6a0:	70 83       	st	Z, r23
 6a2:	62 91       	ld	r22, -Z
 6a4:	ae 17       	cp	r26, r30
 6a6:	bf 07       	cpc	r27, r31
 6a8:	c8 f3       	brcs	.-14     	; 0x69c <strrev+0x10>
 6aa:	08 95       	ret

000006ac <_exit>:
 6ac:	f8 94       	cli

000006ae <__stop_program>:
 6ae:	ff cf       	rjmp	.-2      	; 0x6ae <__stop_program>
